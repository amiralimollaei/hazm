[tool.poetry]
name = "hazm"
version = "0.10.0"
description = "Persian NLP Toolkit"
authors = ["Roshan <salam@roshan-ai.com>"]
maintainers = ["Roshan <salam@roshan-ai.com>"]
license = "MIT"
readme = "README.md"
include = ["data/*"]

classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Text Processing",
    "Natural Language :: Persian",
]

homepage = "https://roshan-ai.ir/hazm/"
repository = "https://github.com/roshan-research/hazm/"
documentation = "https://roshan-ai.ir/hazm/docs/"
keywords = ["nlp", "persian nlp", "persian"]

[tool.poetry.urls]
"Demo" = "https://www.roshan-ai.ir/hazm/demo/"
"Changelog" = "https://github.com/roshan-research/hazm/releases/latest"
"Contribution" = "https://github.com/roshan-research/hazm/blob/master/CONTRIBUTION.md"
"Issues" = "https://github.com/roshan-research/hazm/issues"
"Join-us" = "https://www.roshan-ai.ir/join-us/"

[tool.poetry.dependencies]
python= ">=3.10, <3.14"
nltk="~3.9"
gensim="~4.4"
python-crfsuite="~0.9"
numpy = ">=2.0"
scikit-learn = "~1.7"
fasttext = "^0.9.3"
flashtext = "^2.7"

[tool.poetry.group.docs.dependencies]
mkdocs="^1.6.1"
mkdocs-material="~9.6"
pymdown-extensions="^10.16.1"
mkdocs-glightbox="^0.5.1"
mkdocstrings = "^0.30.1"
mkdocstrings-python = "^1.18.2"
toml = "^0.10.2"
mkdocs-macros-plugin = "^1.4.0"

[tool.poetry.group.docs]
optional=true

[tool.poetry.group.dev.dependencies]
pandas= "^2.3.3"
pytest = "~8.4"
pytest-xdist = {extras = ["psutil"], version = "~3.8"}
poethepoet = "^0.37.0"
ruff = "~0.14"
pytest-cov = "~7.0"
pytest-sugar = "~1.1"
pytest-randomly = "~4.0"
pyinstrument = "^5.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
#line-length = 120
extend-select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    #"S",
    #"BLE",
    #"FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    #"T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    #"TCH",
    "INT",
    "ARG",
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "NPY",
    "RUF",
]
ignore=[
"RUF001", # String contains ambiguous unicode character
"RUF002", # Docstring contains ambiguous unicode character
"RUF003", # Comment contains ambiguous unicode character
"D205", # 1 blank line required between summary line and description in docstring
"E501", # Line too long
"F401", # imported but unused; consider adding to `__all__` or using a redundant alias
"TID252", # Relative imports from parent modules are banned
"PLR0913", # Too many arguments to function call
"ANN001", # Missing type annotation for function argument
"ANN201", # Missing return type annotation for public function
"ANN202", # Missing return type annotation for private function
"PLR0912", # Too many branches
"PLR0915", # Too many statements
"PLR0911", # Too many return statements
"C901", # Too complex
"PLR2004", # Magic value used in comparison, consider replacing 4 with a constant variable
"E722", # Do not use bare `except`
"PLW2901", # `for` loop variable `{variable name}` overwritten by assignment target
"TRY002", # Create your own exception
"D100",	# Missing docstring in public module	
"D101",	# Missing docstring in public class	
"D102",	# Missing docstring in public method	
"D103",	# Missing docstring in public function	
"D104",	# Missing docstring in public package	
"D105",	# Missing docstring in magic method	
"D106",	# Missing docstring in public nested class	
"D107",	# Missing docstring in __init__
]

fix=true
ignore-init-module-imports = true
namespace-packages = ["hazm"]
show-fixes = true

[tool.ruff.per-file-ignores]
"data.py"=["ALL"] # temporary
"sample.py"=["ALL"] # always
"mkdocs_macros.py"=["ALL"] # always
"wiki_extractor.py"=["ALL"] # temporary

[tool.ruff.isort]
force-single-line = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
target-version = ['py310']
preview = true

#filterwarnings = "ignore::DeprecationWarning"
#disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true

[tool.poe.tasks]
# poetry run poe test
# poetry run poe test hazm/normalizer.py
test = "pytest -n auto ${path}"

# poetry run poe lint
# poetry run poe lint -t hazm/normalizer.py
# poetry run poe lint -- --no-fix
[tool.poe.tasks.lint]
cmd = "ruff check"
args = ["${args}"]
help = "Run ruff linter, optionally specify path"
